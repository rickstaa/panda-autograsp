<!-- Main panda Autograsp launchfile
    This launch file launches all the required ROS nodes except the panda_autograsp_cli.py command line interface (CLI).
    This CLI can be opened using the 'rosrun panda_autograsp panda_autograsp_cli.py' command.
-->
<launch>

    <!--Launch file arguments-->
    <arg name="base_name" default="panda_autograsp"/>
    <arg name="output" default="log"/>
    <arg name="debug" default="false"/>
    <arg name="calib_type" default="aruco_board"/> <!--Supports "aruco_board" or "chessboard"-->
    <arg name="gripper_center" default="true"/> <!-- Enable or disale gripper center frame -->
    <arg name="gripper_center_xyz" default="0.0 0.0 0.10"/> <!-- Gripper center position relative to the panda_hand frame -->

    <!--Change loggin format-->
    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [WallTime: ${time}]: [${node}] ${message}" if="$(arg debug)"/>

    <!-- Load panda simulation and visualization -->
    <include file="$(find panda_autograsp)/launch/panda_moveit_config.launch">
        <arg name="gripper_center" value="$(arg gripper_center)" />
        <arg name="gripper_center_xyz" value="$(arg gripper_center_xyz)" />
    </include>

    <!-- Start the Kinect processing ROS nodes
        The IAI_kinect2 package was used for the kinect processing.
    -->
    <include file="$(find panda_autograsp)/launch/kinect2_bridge.launch">
        <arg name="output" value="$(arg output)" />
    </include>

    <!-- Load dynamic reconfigure GUI -->
    <node pkg="rqt_reconfigure" type="rqt_reconfigure" name="dyn_reconf_gui" output="$(arg output)"/>

    <!-- Create static TF for the calibration board (CB)
        The pose for this static TF can be set in the calib_frame_pose.yaml file.
        TF broadcaster conventions:
            yaw: is rotation about Z (blue axis)
            pitch: is rotation about Y (red axis)
            roll: is rotation about X (green axis)
    -->
    <node name="tf2_broadcaster" pkg="panda_autograsp" type="tf2_broadcaster.py" args="panda_link0 calib_frame" output="$(arg output)">
        <rosparam command="load" file="$(find panda_autograsp)/cfg/calib_frame_pose.yaml"/>
        <!--Load calibration parameters-->
    </node>
    <!-- Load panda_autograsp services
        Panda_autograsp services:
           - panda_autograsp: Main panda_autograsp server. Used for calling all the other services.
           - moveit_planner_server: Used for controlling the robot.
           - grasp_planner_server: Used for computing the grasps.
    -->
    <node name="panda_autograsp_server" pkg="panda_autograsp" type="panda_autograsp_server.py" output="screen">
        <param name="calib_type" type="str" value="$(arg calib_type)"/>
        <remap from="image_color" to="kinect2/hd/image_color"/>
        <remap from="image_color_rect" to="kinect2/sd/image_color_rect"/>
        <remap from="image_depth_rect_32FC1" to="kinect2/sd/image_depth_rect_32FC1"/>
        <remap from="hd/camera_info" to="kinect2/hd/camera_info"/>
        <remap from="qhd/camera_info" to="kinect2/qhd/camera_info"/>
        <remap from="sd/camera_info" to="kinect2/sd/camera_info"/>
    </node>
    <node name="grasp_planner" pkg="panda_autograsp" type="grasp_planner_server.py" output="$(arg output)"/>
    <node name="moveit_planner_server" pkg="panda_autograsp" type="moveit_planner_server.py" output="screen">
        <remap from="execute_plan" to="moveit/execute_plan"/>
        <remap from="apply_planning_scene" to="/apply_planning_scene"/>
        <remap from="plan_to_point" to="moveit/plan_to_point"/>
        <remap from="plan_to_path" to="moveit/plan_to_path"/>
        <remap from="plan_random_pose" to="moveit/plan_random_pose"/>
        <remap from="plan_random_joint" to="moveit/plan_random_joint"/>
        <remap from="plan_random_path" to="moveit/plan_random_path"/>
        <remap from="visualize_plan" to="moveit/visualize_plan"/>
    </node>
</launch>